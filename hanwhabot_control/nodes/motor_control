#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import rospy
from geometry_msgs.msg import Twist
from std_msgs.msg import Int16
from std_srvs.srv import *
import time


# 조건을 충족하면 메인에 움직임을 요구할까?
class MainController(object):
    """어떤 미션이냐에 따라 subscribe하는 topic, service가 달라지게 하기"""
    def __init__(self):
        self.mission_num = rospy.get_param("~mission_num")
        self.publish_confirmed_vel = rospy.Publisher("vel_cmd", Twist, queue_size=5)
        self.pub_exam = rospy.Publisher("test", Int16, queue_size=1)
        # self.sub_nothing = rospy.Subscriber("none", Int16, self.test, queue_size=1)
        # 그냥 미션에 따라 다른 서버를 만들까?
        self.find_end_goal = None
        self.r = rospy.Rate(10)

        if self.mission_num == 1:
            # mission 1 의 핵심은 제때 3초간 멈추는 것. 
            self.main_server = rospy.Service("main", SetBool, self.mission_1_srv)
            # self.motor_control_param = rospy.Subscriber("")
            self.stop_num = 0
            self.sleep = rospy.Rate(0.25)

        elif self.mission_num == 3:
            # mission 3 의 핵심은 imu 를 이용한 자세 교정. 자세 교정에 따른 cmd_vel 값 정하기.
            # 또한 수류탄을 제대로 인지하는 것. 인지하여서 거리를 측정. 측정 후 부터는 특정 알고리즘을 
            # 이용하여 문제 해결. 그 후 천천히 움직이며 문제를 해결하면 끝.
            self.main_server = rospy.Service("main", SetBool, self.mission_3_srv)
            self.imu_in_range = False
            # if distance > 30cm, signal will be true and will be sended by service
            self.dist_in_range = False
            # after this, publish cmd_vel very slow.
            
        elif self.mission_num == 4:
            # mission 4 의 핵심은 blue box 를 찾고, 이를 치우는 행위 하기. 그 후 포즈를 정상적으로
            # 한 뒤, 정면으로 이동 중 문 발견하면 천천히 움직여서 30cm 까지만 가기. 만약 30cm 까지 가면
            # 아두이노에서 action goal을 여기로 보냄. 그 후 cmd_vel 을 publish 하면서 전진 후 멈춤
            # 시그널 인지  
            self.main_server = rospy.Service("main", SetBool, self.mission_4_srv)
            self.find_BLUE_BOX = False
            self.find_Door = False
            self.do_action = False

    def mission_1_srv(self, req):
        """req = sleep time"""
        num = 0
        while req.data:
            x = Int16()
            x.data = 2
            self.pub_exam.publish(x)
            num += 1
            self.r.sleep()
            if num == 120:
                break

        y = SetBoolResponse()
        y.success = True
        y.message = "success"
        print("server down")
        return y

    def mission_3_srv(self, req):
        """req = """
        pass

    def mission_4_srv(self, req):
        pass

    def spin(self):
        rospy.spin()
        
if __name__ == "__main__":

    rospy.init_node("main_controller")
    main = MainController()
    main.spin()